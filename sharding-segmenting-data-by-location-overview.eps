%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 929.000000 474.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G87) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 929 474
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 929 474
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: ProximaNova-Regular
%!FontType1-1.0: ProximaNova-Regular 1.0000.1.1000
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
14 dict begin/FontName /ProximaNova-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /N put
dup 34 /o put
dup 35 /r put
dup 36 /t put
dup 37 /h put
dup 38 /space put
dup 39 /A put
dup 40 /m put
dup 41 /e put
dup 42 /i put
dup 43 /c put
dup 44 /a put
dup 45 /E put
dup 46 /u put
dup 47 /p put
dup 48 /quotedblleft put
dup 49 /quotedblright put
dup 50 /Z put
dup 51 /n put
dup 52 /U put
dup 53 /g put
dup 54 /d put
dup 55 /P put
dup 56 /S put
dup 57 /one put
dup 58 /ellipsis put
dup 59 /zero put
dup 60 /two put
dup 61 /C put
dup 62 /l put
dup 63 /s put
dup 64 /hyphen put
dup 65 /G put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -201 1 index div -408 2 index div 2152 3 index div 1823 5 -1 roll div]cvx def
/sfnts [<




2010B119012BB1180AE9B01810B111012BB1100AE9B122012BB119201112B00639B01811B00939B01112B00C3900B11C001112B1030939393031331133153E01333216173E013332161511231134232206071123113423220607119A9928B6646B86172DBA65888C99B74A942899B748922A03DD8F3A6E675249709695FD3502A0CD593FFD2B02A0CD5B3FFD2D0000000001009A000003CF03F60012004700B20000002BB00933B20101002BB20601002BB10E08E901B0132FB000D6B1120AE9B00232B01210B10A012BB1090AE9B114012BB10A121112B0063900B10E001112B003393031331133153E01332019012311342623220607119A993AC069013998746B569F3003DD8F4563FEC0FD4A02877D695A40FD2D000000020060FFE7043303F6000B0019004A00B20A00002BB10F08E9B20401002BB11708E901B01A2FB001D6B10C0DE9B00C10B113012BB1070DE9B11B012BB1130C1112B304090A0324173900B1170F1112B301060700241739303112103E01201E01100E01202613141633323E0135342E01220E016076E10126E17575E1FEDAE12CB09866974A4A97CC984A01600120EA8C8CEAFEE0EC8D8D017CA0DF6CAB6867AA6C6CAB0002009AFE87043903F60010001C005300B20C00002BB11408E9B20101002BB20601002BB11908E9B0002F01B01D2FB000D6B1100AE9B102113232B01010B117012BB1090DE9B11E012BB117101112B1060C393900B119141112B209030F3939393031131133153E013332121514022322262719011E013332361026232206079A9938B165C5F3F3C564AB3F29A65892ACAC9258A629FE870556934E5EFEE9EFEDFEE45C53FDF10289435CD70150D55C420000000001009A0000027D03F4000D003100B20000002BB20101002BB20601002BB10903E901B00E2FB000D6B10D0AE9B00232B10F012B00B109001112B003393031331133153E0133152623220607119A9940AA60241747A62203DD9E52639E04613DFD44000000010046FFE7035803F6002700D500B22600002BB10406E9B21201002BB11806E901B0282FB00FD6B11B0EE9B01B10B107012BB1230EE9B129012BB0361ABAED2DC2D500152B0A0EB00C10B009C0B11D08F9B020C0B00C10B30A0C09132BB30B0C09132BB01D10B31E1D20132BB31F1D20132BB21E1D20208A208A23060E111239B01F39B20B0C09111239B00A3900B7090A0B0C1D1E1F202E2E2E2E2E2E2E2E01B7090A0B0C1D1E1F202E2E2E2E2E2E2E2EB0401A01B11B0F1112B00139B00711B304121826241739B02312B11415393900B118041112B500010F14152324173930313F011E0133323635342E05353436333217072E0123220615141E051514062322464D35B0616F7D446C82836C44C4ABE28C472E9B5E6378446B83836B44CBB8F9836F3C525E4C304224


00>] def
/CharStrings 35 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/zero 3 def
/one 4 def
/two 5 def
/A 6 def
/C 7 def
/E 8 def
/G 9 def
/N 10 def
/P 11 def
/S 12 def
/U 13 def
/Z 14 def
/a 15 def
/c 16 def
/d 17 def
/e 18 def
/g 19 def
/h 20 def
/i 21 def
/l 22 def
/m 23 def
/n 24 def
/o 25 def
/p 26 def
/r 27 def
/s 28 def
/t 29 def
/u 30 def
/quotedblleft 31 def
/quotedblright 32 def
/ellipsis 33 def
/uniFB03 34 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-201 -408 2152 1823}def
/UniqueID 4015547 def
currentdict currentfile eexec

212C3AF70156B4141E7E4D3E451122D8C5386026CDA1DBC86272FC9074ADF3AB311B7B861BFA5251423D126373777ED6B5A639BB423502E086654DA20CFB9C52DDB1ED91E2A7D884841EDAE354A0A2BD189FDF70DB7D5D170C57B248A58C6BAB4A4D7966705858FE72E0E49646258518CAB56F0DA1F9241A6AF40B4C30A38B9D99494321ED4419FD9C0F5E1174C94844B2F75C1C15FFF64ED8138B3C4A14E1EC9C9373A25E84B80CC768CC09067A2B142AE266FD4F961ED5816230C54F8701205F2FF3C8A985CC5A372D17C4BA3A63D4DA66205C4A9AEFD35738F5EFF904032D1AFF437B744958767AE153F9FE36BBB1CD33260FF803031A37874B2EFFEACAB2010BE54FEB664610DF0291198A591496D6C69FA1353DA20611FEB43F6FA5903025BA1403681FD9836EDDAEEFEC961ECA39327F23157055FD39B6D1812166C5241DA2922973D88F76E260CC6AB7A093906CB606A948B637A89B0B4EA04AD1AEA5ACBE7B55EF0FC1E5FDD3520FCFE48F847EBD8F66022857A8E51CAC96B93E9F2C426621C80EEBAAE73C8B78651476ECB920C63B32775E384130502CBE296B7CB3EE7567CAF529F7A1268B935C65E8965018A53A2A0F8CBC6E4181D9B328DF9EC78E4DCADC17CEC2C8D2D61101DC196BDBFDECAB31E5C68667A8E6E91A33D48832FD3826A31D80BED4E3ACF9B3B35FA7EAC44BB20D21CA10DF0F1CE94AB3F5EB9E4205360EA4A8B02EB1CCD89B5C774D1FCE56E9E678BAA730F29B765E3FC9BD3174E015E8B25283B372EBD67C984A153952E7715CC16DD6E636F569BC78662032E369CA1945938F24DEFAA01715914C2041899D84EBD6D37B474A95C3AAE0042FD453AAE96B14D2640B292E5F8241E40C24A2B9ECCC6C967856EB4B4152CCA1B974E80CF463CE2D870D5C604B2AFF914924FBD31DFABFE552E1A1C3D4B521F941EFD2A71D6EEE3A8E5BC117BEB62D66E75E857E5EFC9219CBFC859FF2B323D1BE23F02F036E90E4742E62EB7E9430767113142E4EF694FF805FF970D0969C0EB45AFFCAECF71F8FAA347F4C759E98B63C168EF979810C4743E2F92016219063394C6BBD3D44FA02F8118FCB484941DD69C1534A1AD106B1D0BD14E979F1A31C0A559E1A6C4F5C0DAB975EFB5D5619B78B0A7C7E6EED793FB9277E138BBA036DFC5CCFB07D3207873B6A2640FCDBFBF6630CD3B584CCEAABF0EF52B478200667976BA7632ADF242440654630C8E54CF1BCA7C19F4A207C09DD29093E6831CC179CAD4CCF484248240EBCD83D75F63B49BA2042F59CCF2F133A59AE3BFACF66BCA1178C3C15092E70857A340C236B17CCFEE7C7936B47DBE9E3B2BA1CC7B7AA0AF0CC2F48F9EAD0F8A423A8D69DB2634BA49150B53212D7581BA21FD76A9D35B918CCD5C6FA56FBAF83E5977BB7D19950A0405148DE2A50EFB4D4F2A01DFEAA61D6
8F9FD8167C81CEAE640E4898E6259F10B2410734E652B9CCA6EEA2398ADE2D4EC83B3F13826D284201902C32356AE6D4D6F8940C2E53BD7DC8C9699DC966DB63A8675BB34251914195CE5CD834ADA693E303378A0987E2614727084ACEF494350BBDFE131D4D10AAE87146EB58F891FE8262891CED2AD816683902DC243BBA3641874B1B0650943255D647E339FFF492F7DEFF5E2DFF0BB7C8ED22394859A6735C7F4A4650AB607C99B47C2A910FF61E85BBCBADC503CF05D55BC13AC34319FC25E5DFCAD5754899D258D5E47628E433422B6932EA1B781EF60D706D19BC33FA60C1528BBA9AB697FAE38CB4CE1111E4D6E43167EBB774FD24790167DB480205296C229DA0DCCD6ED082924560573CF1E527DA605333477A27A3D6385B8EFA58E7AA962288FC2F25A3F431857C244E9246515FFE8C65D7E7C84AE6E343AC65892C64C06B7B2199574BFC3B9C018E7E1DB2BE1A6AB0604AD092115C30BF3A614B13F89DA5B95E01DCAAF8797A5299ECF9FE2858CEAB5DA8EF4B39D0122E39146F32CB874D6A864F0240EBD93AE67D28ACC5C424749C5C92439668CA20A98EB23A91CB24A0E554845B621E130B4100EB15776BFD0D927E81014CE3E5B364CBBE65A2DE0CC8838F746FDB09339E1D93BB5907D420B24DC82325ADCD0EDD9EBEB3ADCBD1C285C450CF81CAD703C0E7A64BD32F57451BB6A3A48D9236D5254E868F56D272E91DD3B95C04A1CB3A92D133D57135D0FEEC82718DFA2C24ABBB9D92E179B5CC5799086AD2CEDE0211AB23ED21494AE7C23D26ACFA9C75905D907DC672DF37F59685957607EF6FE23114998660548049DDF1B023D9A128CA69550DE8BF725517C73F3ECC94D69D8A98A48CA741ECC8AC73BED5EBE7E3322F238F1DFA0098FEED6D6BC797CC9CD1753BB14FDDA8DF2428BBBD981CEC484FD935421DAC7198B9511DD04DA06D614A448B53AC2622CC04FEAB64721AF587E8EC9E3BD27C781AB30182B7E9EDCF337557BA648CB0EC38D6CA5D751DF062232DA28C9ED29CF6084AAF7F1E0AAD800B6E3B901BC40EF5BF0F37E3B2C19AB1346846ABDE428937E5E42F1C7B01081893E691A6AE64E1C9CB341B81BBFBD41967E4E6CD8BF94D04B2381B5148EC5E6BE8EDF91A761602CE1C8B12DFA19397E5BF220F37FBC1302CAF793230D31F7E4E80D700859DEE0EC14CFA56320C379AA57CF99F95695953FD7E2AA16B38E94D8D90BFEDCF30BC346B4E89E1230EDB4B9700883A66B25C8FAEB4479C42C7D7818568EDD605593A0CB035035408C4CE107D295475F678BA449522CA286598964258C03CAA3296B189340ABF890736CE694427FA4738EECD8664128F9C887097AA2BF1868C3597E48B030764B8816F7A8B1ACE85E2EE52845AC4937B988AF078076967A30240D36AD01259BF09017A648F56382334F8F5FE36FF5F


A5A233444358464D9DCFDFF1FAA95A9A06025A317B12911CB4364A522749751328CE8146B4D4901DB6B4573BEC6A1CB466F4E666866CF9614C044DD150A44B7B10B0A4BEDC90E5A6EEF6BBD8F461C93CE27B571CC47E6C0E7AC3E973C32F6BD969AAD6767BF73F5973997D796660047BA2E35969DC1CDC67CB74E28ECFD802B6BB11FAB4DAEF047D90B1142E1A11D45D46BB0374E0BA7CEEF0135E8CFE457E8AE11ABB39E34A9B387EE0EEF9535F0497BB522D7DA6CBE7F023ACB61716D515DCA6415A2CE6E79FA83AAC11C902EB6B69F63D447318760FC021A7A41CDACEE5A36E7D6C013865EAD609E56D36F5985A97DAE9498CBC56D57E79CBB9236EF69E02C46E6315CE9D2F5A4548E6949AA8836A717FBA5D096B65805553DB684659CA263D1E12F247A39611D0A8C75E3DE56B784F4ECAA90D7ECB98B4D4BCDAAD2267620A14CA098034A1439A98E73C053074DA99BB80C34EF768114380F3B25A44DCE3BB562228CC33B61F087C256825091ECC311736EA654732D8AEEA38F91655A1995086C87436DB3638D1F811D8095E2AB4D6A14D7696F45037DBFA2CDD6A178D85113632BBB4872B55AE29B339900A97A7FC7252B2F838E4CBCB807A859E678765EC7DAC161B74A43F5EC9D301D58AA1D55D09E8BFC416392C418C9F7226EC1F2A971D456FE5D0B3B841CA9F80DF380E397163ECE4B1E67994BB76C663E5BBC0CB270D4ABDC0886D4350701B641D623E059C01B64A60417206F21B48962BA909E289A332A29F367A02C8201D9727458EF752C7E7227A4B22965FA64C6CCBAE67BDAE1C67009DE5A5269FBFA13C75C35576C03800BDDE55575C9271A0A08F7C99C5B6B629F999445149
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/ProximaNova-Regular cguidfix
/F1.1/ProximaNova-Regular renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 929 474 rc
0 474 m
929 474 l
929 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
0 474 m
929 474 l
929 0 l
0 0 l
h
0 474 m
f
3 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
-46 52 m
879 52 l
879 473 l
-46 473 l
h
-46 52 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
53 390.14651 m
53 171.93979 l
252.5 63 l
452 171.93979 l
452 390.14651 l
h
53 390.14651 m
f
2 w
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
5 84.853477 m
5 303.06021 l
204.5 412 l
404 303.06021 l
404 84.853477 l
h
5 84.853477 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
485 390.14651 m
485 171.93979 l
684.5 63 l
884 171.93979 l
884 390.14651 l
h
485 390.14651 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
437 84.853477 m
437 303.06021 l
636.5 412 l
836 303.06021 l
836 84.853477 l
h
437 84.853477 m
S
0 i
/F1.1[ 28 0 0 -28 0 0]sf
116.0293 338 m
(!"#$%&'\(\)#*+,)[ 19.810547 16.009766 9.228516 8.230469 15.449219 7.246094 18.416016 22.613281 15.763672 9.228516 6.289062 13.876953 0.000000 ] xS
592.31934 338 m
(-.#"/\))[ 15.927734 15.421875 9.228516 16.009766 16.009766 0.000000 ] xS
/F1.1[ 23 0 0 -23 0 0]sf
150.73975 452 m
(0!'1&2"3\))[ 8.961914 16.272949 15.127441 8.961914 5.952148 13.454102 13.150879 12.690430 0.000000 ] xS
583.84033 452 m
(0-41&2"3\))[ 8.961914 13.083496 16.115723 8.961914 5.952148 13.454102 13.150879 12.690430 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
75.5 325.44116 m
174.43039 325.44116 l
174.43039 289.55884 l
75.5 289.55884 l
h
75.5 325.44116 m
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
27.5 149.55882 m
126.4304 149.55882 l
126.4304 185.44118 l
27.5 185.44118 l
h
27.5 149.55882 m
S
1 1 1 sc
0 i
/F1.1[ 18 0 0 -18 0 0]sf
36.482777 173.5 m
(\("35"6&7)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
83.076324 282.38235 m
182.00671 282.38235 l
182.00671 246.5 l
83.076324 246.5 l
h
83.076324 282.38235 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
35.076324 192.61765 m
134.00671 192.61765 l
134.00671 228.5 l
35.076324 228.5 l
h
35.076324 192.61765 m
S
1 1 1 sc
0 i
44.06789 216.55882 m
(\("35"6&8)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
75.5 239.32353 m
174.43039 239.32353 l
174.43039 203.44118 l
75.5 203.44118 l
h
75.5 239.32353 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
27.5 235.67647 m
126.4304 235.67647 l
126.4304 271.55884 l
27.5 271.55884 l
h
27.5 235.67647 m
S
1 1 1 sc
0 i
36.491566 259.61765 m
(\("35"6&8)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
199.24664 325.44116 m
298.17703 325.44116 l
298.17703 289.55884 l
199.24664 289.55884 l
h
199.24664 325.44116 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
151.24664 149.55882 m
250.17703 149.55882 l
250.17703 185.44118 l
151.24664 185.44118 l
h
151.24664 149.55882 m
S
1 1 1 sc
0 i
160.22942 173.5 m
(\("35"6&7)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
206.82297 282.38235 m
305.75336 282.38235 l
305.75336 246.5 l
206.82297 246.5 l
h
206.82297 282.38235 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
158.82297 192.61765 m
257.75336 192.61765 l
257.75336 228.5 l
158.82297 228.5 l
h
158.82297 192.61765 m
S
1 1 1 sc
0 i
167.81453 216.55882 m
(\("35"6&8)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
199.24664 239.32353 m
298.17703 239.32353 l
298.17703 203.44118 l
199.24664 203.44118 l
h
199.24664 239.32353 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
151.24664 235.67647 m
250.17703 235.67647 l
250.17703 271.55884 l
151.24664 271.55884 l
h
151.24664 235.67647 m
S
1 1 1 sc
0 i
160.2382 259.61765 m
(\("35"6&8)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
322.99329 325.44116 m
421.92368 325.44116 l
421.92368 289.55884 l
322.99329 289.55884 l
h
322.99329 325.44116 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
274.99329 149.55882 m
373.92368 149.55882 l
373.92368 185.44118 l
274.99329 185.44118 l
h
274.99329 149.55882 m
S
1 1 1 sc
0 i
283.97604 173.5 m
(\("35"6&7)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
330.56961 282.38235 m
429.5 282.38235 l
429.5 246.5 l
330.56961 246.5 l
h
330.56961 282.38235 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
282.56961 192.61765 m
381.5 192.61765 l
381.5 228.5 l
282.56961 228.5 l
h
282.56961 192.61765 m
S
1 1 1 sc
0 i
291.56116 216.55882 m
(\("35"6&8)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
322.99329 239.32353 m
421.92368 239.32353 l
421.92368 203.44118 l
322.99329 203.44118 l
h
322.99329 239.32353 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
274.99329 235.67647 m
373.92368 235.67647 l
373.92368 271.55884 l
274.99329 271.55884 l
h
274.99329 235.67647 m
S
1 1 1 sc
0 i
283.98483 259.61765 m
(\("35"6&8)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
569.37329 325.44116 m
668.30371 325.44116 l
668.30371 289.55884 l
569.37329 289.55884 l
h
569.37329 325.44116 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
521.37329 149.55882 m
620.30371 149.55882 l
620.30371 185.44118 l
521.37329 185.44118 l
h
521.37329 149.55882 m
S
1 1 1 sc
0 i
530.36487 173.5 m
(\("35"6&8)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
576.94965 282.38235 m
675.88007 282.38235 l
675.88007 246.5 l
576.94965 246.5 l
h
576.94965 282.38235 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
528.94965 192.61765 m
627.88007 192.61765 l
627.88007 228.5 l
528.94965 228.5 l
h
528.94965 192.61765 m
S
1 1 1 sc
0 i
537.93243 216.55882 m
(\("35"6&7)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
569.37329 239.32353 m
668.30371 239.32353 l
668.30371 203.44118 l
569.37329 203.44118 l
h
569.37329 239.32353 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
521.37329 235.67647 m
620.30371 235.67647 l
620.30371 271.55884 l
521.37329 271.55884 l
h
521.37329 235.67647 m
S
1 1 1 sc
0 i
530.36487 259.61765 m
(\("35"6&8)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
693.11993 325.44116 m
792.05035 325.44116 l
792.05035 289.55884 l
693.11993 289.55884 l
h
693.11993 325.44116 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
645.11993 149.55882 m
744.05035 149.55882 l
744.05035 185.44118 l
645.11993 185.44118 l
h
645.11993 149.55882 m
S
1 1 1 sc
0 i
654.11151 173.5 m
(\("35"6&8)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
700.69629 282.38235 m
799.62671 282.38235 l
799.62671 246.5 l
700.69629 246.5 l
h
700.69629 282.38235 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
652.69629 192.61765 m
751.62671 192.61765 l
751.62671 228.5 l
652.69629 228.5 l
h
652.69629 192.61765 m
S
1 1 1 sc
0 i
661.68787 216.55882 m
(\("35"6&8)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0.40784299 0.73725498 0.21176501 sc
CM
693.11993 239.32353 m
792.05035 239.32353 l
792.05035 203.44118 l
693.11993 203.44118 l
h
693.11993 239.32353 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 48 475 cm
645.11993 235.67647 m
744.05035 235.67647 l
744.05035 271.55884 l
645.11993 271.55884 l
h
645.11993 235.67647 m
S
1 1 1 sc
0 i
654.10272 259.61765 m
(\("35"6&7)[ 14.537109 10.291992 9.931641 10.344727 10.291992 10.344727 4.658203 0.000000 ] xS
0 0 0 sc
/F1.1[ 23 0 0 -23 0 0]sf
39 129 m
(8%,#6&9)[ 13.476562 12.690430 12.140137 7.580566 13.218262 5.952148 0.000000 ] xS
164.02539 129 m
(8%,#6&:)[ 13.476562 12.690430 12.140137 7.580566 13.218262 5.952148 0.000000 ] xS
281.0127 129 m
(8%,#6&9;)[ 13.476562 12.690430 12.140137 7.580566 13.218262 5.952148 7.793945 0.000000 ] xS
529.51221 129 m
(8%,#6&99)[ 13.476562 12.690430 12.140137 7.580566 13.218262 5.952148 7.793945 0.000000 ] xS
648.13623 129 m
(8%,#6&9<)[ 13.476562 12.690430 12.140137 7.580566 13.218262 5.952148 7.793945 0.000000 ] xS
/F1.1[ 32 0 0 -32 0 0]sf
144.14062 34 m
(8%,#6\)6&=>.?$\)#&@&A\)"5#,/%*+,>&2"3*35&)[ 18.750000 17.656250 16.890625 10.546875 18.390625 18.015625 18.390625 8.281250 21.625000 7.187500 17.625000 14.875000 9.406250 18.015625 10.546875 8.281250 9.593750 8.281250 22.812500 18.015625 18.296875 18.390625 10.546875 16.890625 18.296875 17.656250 7.187500 15.859375 16.890625 7.187500 8.281250 18.718750 18.296875 17.656250 7.187500 17.656250 18.390625 0.000000 ] xS
[
1
4
] 0 d
0.60000002 i
/Cs3 SC
0 0 0 sc
13.260254 139 m
138.26025 139 l
138.26025 279 l
13.260254 279 l
h
13.260254 139 m
S
142.33289 139 m
267.33289 139 l
267.33289 279 l
142.33289 279 l
h
142.33289 139 m
S
270.73975 139 m
395.73975 139 l
395.73975 279 l
270.73975 279 l
h
270.73975 139 m
S
507.33524 140.55882 m
632.33521 140.55882 l
632.33521 280.55884 l
507.33524 280.55884 l
h
507.33524 140.55882 m
S
637 140 m
762 140 l
762 280 l
637 280 l
h
637 140 m
S
ep
end
%%Trailer
%%EOF
